<?php

namespace Sandbox\ApiBundle\Repository\Shop;

use Doctrine\ORM\EntityRepository;
use Sandbox\ApiBundle\Entity\Shop\Shop;
use Sandbox\ApiBundle\Entity\Shop\ShopOrder;

/**
 * ShopOrderRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShopOrderRepository extends EntityRepository
{
    /**
     * @param $shopId
     * @param $status
     * @param $start
     * @param $end
     * @param $sort
     * @param $search
     * @param $platform
     * @param $$myShopIds
     *
     * @return array
     */
    public function getAdminShopOrders(
        $shopId,
        $status,
        $start,
        $end,
        $sort,
        $search,
        $platform,
        $myShopIds
    ) {
        $query = $this->createQueryBuilder('o')
            ->where('o.status != :unpaid')
            ->andWhere('o.status != :cancelled')
            ->andWhere('o.shopId IN (:shopIds)')
            ->orderBy('o.modificationDate', $sort)
            ->setParameter('shopIds', $myShopIds)
            ->setParameter('unpaid', ShopOrder::STATUS_UNPAID)
            ->setParameter('cancelled', ShopOrder::STATUS_CANCELLED);

        if ($platform == ShopOrder::PLATFORM_BACKEND
            && (is_null($search) || empty($search))) {
            $query = $query->andWhere('o.unoriginal = :unoriginal')
                ->setParameter('unoriginal', false);
        }

        if (!is_null($shopId) && !empty($shopId)) {
            $query = $query->andWhere('o.shopId = :shopId')
                ->setParameter('shopId', $shopId);
        }

        if (!is_null($status) && !empty($status)) {
            $query = $query->andWhere('o.status IN (:status)')
                ->setParameter('status', $status);
        }

        if (!is_null($start) && !empty($start)) {
            $start = new \DateTime($start);
            $query = $query->andWhere('o.paymentDate >= :start')
                ->setParameter('start', $start);
        }

        if (!is_null($end) && !empty($end)) {
            $end = new \DateTime($end);
            $end->setTime(23, 59, 59);
            $query = $query->andWhere('o.paymentDate <= :end')
                ->setParameter('end', $end);
        }

        // Search products by product Id or product name.
        if (!is_null($search) && !empty($search)) {
            $query->join('SandboxApiBundle:User\UserProfile', 'u', 'WITH', 'u.userId = o.userId')
                ->andWhere('o.orderNumber LIKE :search OR u.name LIKE :search')
                ->setParameter('search', "%$search%");
        }

        return $query->getQuery()->getResult();
    }

    /**
     * get unpaid shop orders.
     */
    public function getUnpaidShopOrders()
    {
        $now = new \DateTime();
        $start = clone $now;
        $start->modify('-15 minutes');

        $query = $this->createQueryBuilder('o')
            ->where('o.status = :unpaid')
            ->andWhere('o.creationDate <= :start')
            ->andWhere('o.unoriginal = :unoriginal')
            ->setParameter('start', $start)
            ->setParameter('unpaid', ShopOrder::STATUS_UNPAID)
            ->setParameter('unoriginal', false)
            ->getQuery();

        return $query->getResult();
    }

    /**
     * @param $orderId
     *
     * @return mixed
     *
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getAdminShopOrderById(
        $orderId
    ) {
        $query = $this->createQueryBuilder('o')
            ->where('o.id = :orderId')
            ->andWhere('o.status != :unpaid')
            ->andWhere('o.status != :cancelled')
            ->setParameter('unpaid', ShopOrder::STATUS_UNPAID)
            ->setParameter('cancelled', ShopOrder::STATUS_CANCELLED)
            ->setParameter('orderId', $orderId)
            ->getQuery();

        return $query->getOneOrNullResult();
    }

    /**
     * @param $shopId
     * @param $time
     *
     * @return mixed
     *
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getAdminShopOrdersByTime(
        $shopId,
        $time
    ) {
        $time = new \DateTime($time);

        $query = $this->createQueryBuilder('o')
            ->where('o.status = :paid')
            ->andWhere('o.shopId = :shopId')
            ->andWhere('o.paymentDate >= :time')
            ->setParameter('paid', ShopOrder::STATUS_PAID)
            ->setParameter('time', $time)
            ->setParameter('shopId', $shopId)
            ->getQuery();

        return $query->getResult();
    }
}
