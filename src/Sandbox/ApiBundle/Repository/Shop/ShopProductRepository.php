<?php

namespace Sandbox\ApiBundle\Repository\Shop;

use Doctrine\ORM\EntityRepository;
use Sandbox\AdminShopApiBundle\Data\Shop\ShopMenuPosition;

/**
 * ShopProductRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShopProductRepository extends EntityRepository
{
    /**
     * @param $menuId
     *
     * @return array
     */
    public function countShopProductByMenu(
        $menuId
    ) {
        $query = $this->createQueryBuilder('p')
            ->select('COUNT(p.id)')
            ->where('p.menuId = :menuId')
            ->andWhere('p.invisible = :invisible')
            ->setParameter('menuId', $menuId)
            ->setParameter('invisible', false)
            ->getQuery();

        return $query->getSingleScalarResult();
    }

    /**
     * @param $menuId
     *
     * @return array
     */
    public function getShopProductByShopId(
        $shopId,
        $id,
        $online = false
    ) {
        $query = $this->createQueryBuilder('p')
            ->join('SandboxApiBundle:Shop\ShopMenu', 'm', 'WITH', 'm.id = p.menuId')
            ->join('SandboxApiBundle:Shop\Shop', 's', 'WITH', 's.id = m.shopId')
            ->where('p.id = :id')
            ->andWhere('s.id = :shopId')
            ->andWhere('p.invisible = :invisible')
            ->setParameter('id', $id)
            ->setParameter('invisible', false)
            ->setParameter('shopId', $shopId);

        if ($online) {
            $query = $query->andWhere('p.online = :online')
                ->andWhere('s.online = :onlineStatus')
                ->setParameter('online', true)
                ->setParameter('onlineStatus', true);
        }

        $query = $query->getQuery();

        return $query->getOneOrNullResult();
    }

    /**
     * @param $shopId
     * @param $menuId
     * @param $online
     * @param $search
     *
     * @return array
     */
    public function getShopProductsByShopId(
        $shopId,
        $menuId,
        $online,
        $search,
        $limit,
        $offset
    ) {
        $query = $this->createQueryBuilder('p')
            ->join('SandboxApiBundle:Shop\ShopMenu', 'm', 'WITH', 'm.id = p.menuId')
            ->join('SandboxApiBundle:Shop\Shop', 's', 'WITH', 's.id = m.shopId')
            ->where('p.invisible = :invisible')
            ->andWhere('s.id = :shopId')
            ->andWhere('s.isDeleted = FALSE')
            ->orderBy('p.sortTime', 'DESC')
            ->setParameter('invisible', false)
            ->setParameter('shopId', $shopId);

        if (!is_null($menuId)) {
            $query = $query->andWhere('m.id = :menuId')
                ->setParameter('menuId', $menuId);
        }

        if (!is_null($online)) {
            $query = $query->andWhere('p.online = :online')
                ->setParameter('online', $online);
        }

        // Search products by product Id or product name.
        if (!is_null($search)) {
            $query->andWhere('p.id LIKE :search OR p.name LIKE :search')
                ->setParameter('search', "%$search%");
        }

        if (!is_null($limit) && !is_null($offset)) {
            $query->setFirstResult($offset)
                ->setMaxResults($limit);
        }

        $query = $query->getQuery();

        return $query->getResult();
    }

    /**
     * @param $menuId
     * @param $limit
     * @param $offset
     *
     * @return array
     */
    public function getShopProductsByMenu(
        $menuId,
        $limit,
        $offset
    ) {
        $query = $this->createQueryBuilder('p')
            ->where('p.menuId = :menuId')
            ->andWhere('p.online = :online')
            ->andWhere('p.invisible = :invisible')
            ->setParameter('menuId', $menuId)
            ->setParameter('invisible', false)
            ->setParameter('online', true)
            ->orderBy('p.sortTime', 'DESC')
            ->setMaxResults($limit)
            ->setFirstResult($offset)
            ->getQuery();

        return $query->getResult();
    }

    /**
     * @param $product
     * @param $action
     *
     * @return array
     */
    public function findSwapShopProduct(
        $product,
        $action
    ) {
        $query = $this->createQueryBuilder('p')
            ->where('p.menuId = :menuId')
            ->andWhere('p.invisible = :invisible')
            ->setParameter('invisible', false)
            ->setParameter('menuId', $product->getMenuId());

        // operator
        $operator = '>';
        $orderBy = 'ASC';
        if ($action == ShopMenuPosition::ACTION_DOWN) {
            $operator = '<';
            $orderBy = 'DESC';
        }

        $query = $query->andWhere('p.sortTime '.$operator.' :sortTime')
            ->setParameter('sortTime', $product->getSortTime())
            ->orderBy('p.sortTime', $orderBy)
            ->setMaxResults(1)
            ->getQuery();

        return $query->getOneOrNullResult();
    }

    /**
     * @param $shopId
     */
    public function setShopProductsOfflineByShopId(
        $shopId
    ) {
        // get valid products
        $queryProducts = $this->createQueryBuilder('p')
            ->join('SandboxApiBundle:Shop\ShopMenu', 'm', 'WITH', 'm.id = p.menuId')
            ->join('SandboxApiBundle:Shop\Shop', 's', 'WITH', 's.id = m.shopId')
            ->select('p.id')
            ->where('s.id = :shopId')
            ->andWhere('p.invisible = FALSE')
            ->andWhere('p.online = TRUE')
            ->setParameter('shopId', $shopId);

        $productIds = $queryProducts->getQuery()->getResult();
        $productIds = array_map('current', $productIds);

        $query = $this->createQueryBuilder('p')
            ->update()
            ->set('p.online', 'FALSE')
            ->set('p.isOfflineByShop', 'TRUE')
            ->where('p.id IN (:ids)')
            ->setParameter('ids', $productIds)
            ->getQuery();

        $query->execute();
    }

    /**
     * @param $shopId
     */
    public function setShopProductsOnlineByShopId(
        $shopId
    ) {
        // get valid products
        $queryProducts = $this->createQueryBuilder('p')
            ->join('SandboxApiBundle:Shop\ShopMenu', 'm', 'WITH', 'm.id = p.menuId')
            ->join('SandboxApiBundle:Shop\Shop', 's', 'WITH', 's.id = m.shopId')
            ->select('p.id')
            ->where('s.id = :shopId')
            ->andWhere('s.active = TRUE')
            ->andWhere('p.invisible = FALSE')
            ->andWhere('p.online = FALSE')
            ->andWhere('p.isOfflineByShop = TRUE')
            ->setParameter('shopId', $shopId);

        $productIds = $queryProducts->getQuery()->getResult();
        $productIds = array_map('current', $productIds);

        $query = $this->createQueryBuilder('p')
            ->update()
            ->set('p.online', 'TRUE')
            ->set('p.isOfflineByShop', 'FALSE')
            ->where('p.id IN (:ids)')
            ->setParameter('ids', $productIds);

        $query->getQuery()->execute();
    }

    /**
     * @param $building
     */
    public function setShopProductsDeletedByBuilding(
        $building
    ) {
        // get valid products
        $queryProducts = $this->createQueryBuilder('p')
            ->join('SandboxApiBundle:Shop\ShopMenu', 'm', 'WITH', 'm.id = p.menuId')
            ->join('SandboxApiBundle:Shop\Shop', 's', 'WITH', 's.id = m.shopId')
            ->select('p.id')
            ->where('s.building = :building')
            ->setParameter('building', $building);

        $productIds = $queryProducts->getQuery()->getResult();
        $productIds = array_map('current', $productIds);

        $query = $this->createQueryBuilder('p')
            ->update()
            ->set('p.online', 'FALSE')
            ->set('p.invisible', 'TRUE')
            ->where('p.id IN (:ids)')
            ->setParameter('ids', $productIds);

        $query->getQuery()->execute();
    }
}
