<?php

namespace Sandbox\ApiBundle\Repository\Shop;

use Doctrine\ORM\EntityRepository;

/**
 * ShopRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShopRepository extends EntityRepository
{
    /**
     * @param $buildingId
     * @param bool|true $active
     * @param bool|true $online
     * @param array     $shopIds
     *
     * @return array
     */
    public function getShopByBuilding(
        $buildingId,
        $active = false,
        $online = false,
        $shopIds = null
    ) {
        $query = $this->createQueryBuilder('s')
            ->where('s.buildingId = :buildingId')
            ->orderBy('s.creationDate', 'ASC')
            ->setParameter('buildingId', $buildingId);

        // filter active shops
        if ($active) {
            $query = $query->andWhere('s.active = :active')
                ->setParameter('active', true);
        }

        // filter online shops
        if ($online) {
            $query = $query->andWhere('s.online = :online')
                ->setParameter('online', true);
        }

        // filter by shop ids
        if (!is_null($shopIds)) {
            $query->andWhere('s.id IN (:shopIds)');
            $query->setParameter('shopIds', $shopIds);
        }

        return $query->getQuery()->getResult();
    }

    /**
     * @param $shopId
     * @param bool|true $allowed
     *
     * @return array
     */
    public function getShopById(
        $shopId,
        $active = false,
        $online = false
    ) {
        $query = $this->createQueryBuilder('s')
            ->where('s.id = :shopId')
            ->setParameter('shopId', $shopId);

        // check if only can see shops currently open
        if ($active) {
            $query = $query->andWhere('s.active = :active')
                ->setParameter('active', true);
        }

        // filter online shops
        if ($online) {
            $query = $query->andWhere('s.online = :online')
                ->setParameter('online', true);
        }

        return $query->getQuery()->getOneOrNullResult();
    }

    /**
     * @param $buildingId
     * @param bool|true $allowed
     *
     * @return array
     */
    public function getShopByBuildingForPage(
        $buildingId,
        $allowed = true
    ) {
        $query = $this->createQueryBuilder('s')
            ->select(
                's.online',
                's.close',
                's.active',
                's.description',
                's.id',
                's.name',
                's.startHour',
                's.endHour'
            )
            ->where('s.buildingId = :buildingId')
            ->orderBy('s.creationDate', 'ASC')
            ->setParameter('buildingId', $buildingId);

        // check if only can see shops currently active
        if (!$allowed) {
            $query = $query->andWhere('s.active = :active')
                ->setParameter('active', true);
        }

        return $query->getQuery()->getResult();
    }

    /**
     * @param $buildingId
     *
     * @return array
     */
    public function getMyShopByBuilding(
        $buildingId
    ) {
        $query = $this->createQueryBuilder('s')
            ->select('s.id as shopId')
            ->where('s.buildingId = :buildingId')
            ->orderBy('s.creationDate', 'ASC')
            ->setParameter('buildingId', $buildingId);

        return $query->getQuery()->getResult();
    }

    /**
     * @param string $lat
     * @param string $lng
     * @param float  $range
     *
     * @return array
     */
    public function findNearByShops(
        $lat,
        $lng,
        $range
    ) {
        $query = $this->getEntityManager()
            ->createQuery(
                '
                  SELECT s,
                  (
                    6371
                    * acos(cos(radians(:latitude)) * cos(radians(rb.lat))
                    * cos(radians(rb.lng) - radians(:longitude))
                    + sin(radians(:latitude)) * sin(radians(rb.lat)))
                    ) as HIDDEN distance
                    FROM SandboxApiBundle:Room\RoomBuilding rb
                    JOIN SandboxApiBundle:Room\RoomCity c WITH rb.cityId = c.id
                    JOIN SandboxApiBundle:Shop\Shop s WITH s.buildingId = rb.id
                    WHERE s.online = TRUE AND s.active = TRUE
                    HAVING distance < :range
                    ORDER BY distance ASC
                '
            )
            ->setParameter('latitude', $lat)
            ->setParameter('longitude', $lng)
            ->setParameter('range', $range);

        return $query->getResult();
    }
}
