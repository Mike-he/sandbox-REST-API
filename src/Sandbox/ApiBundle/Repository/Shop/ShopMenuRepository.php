<?php

namespace Sandbox\ApiBundle\Repository\Shop;

use Doctrine\ORM\EntityRepository;
use Sandbox\AdminShopApiBundle\Data\Shop\ShopMenuPosition;

/**
 * ShopMenuRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShopMenuRepository extends EntityRepository
{
    /**
     * @param $menu
     * @param $action
     *
     * @return array
     */
    public function findSwapShopMenu(
        $menu,
        $action
    ) {
        $query = $this->createQueryBuilder('m')
            ->where('m.shopId = :shopId')
            ->andWhere('m.invisible = :invisible')
            ->setParameter('invisible', false)
            ->setParameter('shopId', $menu->getShopId());

        // operator
        $operator = '>';
        $orderBy = 'ASC';
        if ($action == ShopMenuPosition::ACTION_DOWN) {
            $operator = '<';
            $orderBy = 'DESC';
        }

        $query = $query->andWhere('m.sortTime '.$operator.' :sortTime')
            ->setParameter('sortTime', $menu->getSortTime())
            ->orderBy('m.sortTime', $orderBy)
            ->setMaxResults(1)
            ->getQuery();

        return $query->getOneOrNullResult();
    }

    /**
     * @param $shopId
     *
     * @return array
     */
    public function getShopMenuByShop(
        $shopId
    ) {
        $query = $this->createQueryBuilder('m')
            ->where('m.shopId = :shopId')
            ->andWhere('m.invisible = :invisible')
            ->setParameter('shopId', $shopId)
            ->setParameter('invisible', false)
            ->orderBy('m.sortTime', 'DESC')
            ->getQuery();

        return $query->getResult();
    }

    /**
     * @param $menuId
     * @param $shopId
     *
     * @return array
     */
    public function getShopMenuById(
        $menuId,
        $shopId
    ) {
        $query = $this->createQueryBuilder('m')
            ->where('m.id = :id')
            ->andWhere('m.shopId = :shopId')
            ->andWhere('m.invisible = :invisible')
            ->setParameter('id', $menuId)
            ->setParameter('shopId', $shopId)
            ->setParameter('invisible', false)
            ->getQuery();

        return $query->getOneOrNullResult();
    }
}
