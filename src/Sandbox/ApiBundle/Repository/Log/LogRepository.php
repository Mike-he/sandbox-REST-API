<?php

namespace Sandbox\ApiBundle\Repository\Log;

use Doctrine\ORM\EntityRepository;

/**
 * LogRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LogRepository extends EntityRepository
{
    /**
     * @param $companyId
     * @param $module
     * @param $search
     * @param $key
     * @param $objectId
     * @param $limit
     * @param $offset
     *
     * @return array
     */
    public function getLogList(
        $companyId,
        $module,
        $search,
        $key,
        $objectId,
        $limit,
        $offset
    ) {
        $notFirst = false;

        $query = $this->createQueryBuilder('l')
            ->orderBy('l.logObjectId', 'DESC');

        if (!is_null($companyId) && !empty($companyId)) {
            $where = 'l.salesCompanyId = :companyId';
            $this->addWhereQuery($query, $notFirst, $where);
            $query->setParameter('companyId', $companyId);

            $notFirst = true;
        }

        if (!is_null($module) && !empty($module)) {
            $where = 'l.logModule = :logModule';
            $this->addWhereQuery($query, $notFirst, $where);
            $query->setParameter('logModule', $module);

            $notFirst = true;
        }

        if (!is_null($key) && !empty($key) && !is_null($objectId) && !empty($objectId)) {
            $where = 'l.logObjectKey = :key AND l.logObjectId = :objectId';
            $this->addWhereQuery($query, $notFirst, $where);
            $query->setParameter('key', $key)
                ->setParameter('objectId', $objectId);

            $notFirst = true;
        }

        if (!is_null($search) && !empty($search)) {
            $query->leftJoin('SandboxApiBundle:SalesAdmin\SalesCompany', 'c', 'WITH', 'c.id = l.salesCompanyId');

            $where = 'l.logModule LIKE :logModule OR 
                l.adminUsername LIKE :search OR 
                c.name LIKE :search OR 
                l.logAction LIKE :search
            ';
            $this->addWhereQuery($query, $notFirst, $where);

            $query->setParameter('search', '%'.$search.'%');
            $notFirst = true;
        }

        $query->setMaxResults($limit)->setFirstResult($offset);

        return $query->getQuery()->getResult();
    }

    /**
     * @param $companyId
     * @param $module
     * @param $search
     * @param $key
     * @param $objectId
     *
     * @return mixed
     */
    public function getLogCount(
        $companyId,
        $module,
        $search,
        $key,
        $objectId
    ) {
        $notFirst = false;

        $query = $this->createQueryBuilder('l')
            ->select('COUNT(l)')
            ->orderBy('l.creationDate', 'DESC');

        if (!is_null($companyId) && !empty($companyId)) {
            $where = 'l.salesCompanyId = :companyId';
            $this->addWhereQuery($query, $notFirst, $where);
            $query->setParameter('companyId', $companyId);

            $notFirst = true;
        }

        if (!is_null($module) && !empty($module)) {
            $where = 'l.logModule = :logModule';
            $this->addWhereQuery($query, $notFirst, $where);
            $query->setParameter('logModule', $module);

            $notFirst = true;
        }

        if (!is_null($key) && !empty($key) && !is_null($objectId) && !empty($objectId)) {
            $where = 'l.logObjectKey = :key AND l.logObjectId = :objectId';
            $this->addWhereQuery($query, $notFirst, $where);
            $query->setParameter('key', $key)
                ->setParameter('objectId', $objectId);

            $notFirst = true;
        }

        if (!is_null($search) && !empty($search)) {
            $query->leftJoin('SandboxApiBundle:SalesAdmin\SalesCompany', 'c', 'WITH', 'c.id = l.salesCompanyId');

            $where = 'l.logModule LIKE :logModule OR 
                l.adminUsername LIKE :search OR 
                c.name LIKE :search OR 
                l.logAction LIKE :search
            ';
            $this->addWhereQuery($query, $notFirst, $where);

            $query->setParameter('search', '%'.$search.'%');
            $notFirst = true;
        }

        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * @param QueryBuilder $query
     * @param bool         $notFirst
     * @param string       $where
     */
    private function addWhereQuery(
        $query,
        $notFirst,
        $where
    ) {
        if ($notFirst) {
            $query->andWhere($where);
        } else {
            $query->where($where);
        }
    }
}
